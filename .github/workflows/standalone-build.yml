name: Stakgraph Standalone Test
on:
  pull_request:
    branches:
      - main

jobs:
  run-standalone-test:
    runs-on: ubuntu-latest
    name: Run standalone tests
    steps:
      - name: Enable docker.host.internal for Ubuntu
        run: |
          pwd && sudo bash -c 'echo "172.17.0.1 host.docker.internal" >> /etc/hosts'

      - name: Checkout from Github
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache Cargo Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Set up Docker cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Pull Neo4j Docker image
        run: docker pull sphinxlightning/sphinx-neo4j:latest

      - name: Give Permission
        working-directory: ./mcp
        run: |
          mkdir -p ./.neo4j/plugins
          sudo chown -R 1000:1000 ./.neo4j/plugins
          sudo chmod -R 777 ./.neo4j/plugins  
          sudo chmod -R 777 ./conf

      - name: Run Neo4j
        working-directory: ./mcp
        run: docker compose -f neo4j.yaml up -d

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"
          cache: true

      - name: Install gopls
        run: go install golang.org/x/tools/gopls@latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install TypeScript and TypeScript LSP
        run: npm install -g typescript typescript-language-server

      - name: Wait for Neo4j to be Ready
        run: |
          echo "Waiting for Neo4j to be healthy..."
          timeout 300s sh -c '
          until docker inspect --format "{{json .State.Health.Status }}" neo4j.sphinx | grep -q "healthy"; do
            echo "Neo4j is not ready yet..."
            sleep 5
          done'
          echo "Neo4j is healthy!"

      # Run all tests in parallel with a shared database
      - name: Run All Tests
        run: |
          export USE_LSP=false
          export LSP_SKIP_POST_CLONE=1
          export TEST_REF_ID="test_ref_id"
          cargo test --features neo4j -- --test-threads=1

      - name: Cleanup
        if: always()
        run: |
          if [ -f standalone.pid ]; then
            kill $(cat standalone.pid) || true
          fi
          docker compose -f ./mcp/neo4j.yaml down


